//SHORT- CIRCUIT se usa con los operadores l√≥gicos && (AND) y || (OR) 
// para evaluar expresiones de manera m√°s eficiente, deteni√©ndose tan 
// pronto como el resultado final sea determinado.

//falso
//false
//0
//'' string vacio 
//null
//undefined
//Nan 

//------------------------------------------------------------------------
//¬øQu√© hace este c√≥digo? 
// Se declara la variable nombre con el valor "Marvin"
//Luego, username se asigna usando el operador l√≥gico || (OR)
//Si nombre tiene un valor v√°lido (truthy), username tomar√° su valor.
//Si nombre est√° vac√≠o (""), es null, undefined o cualquier valor falsy, entonces se asignar√° "Anonimo"
let nombre = 'Marvin'; 
let username = nombre || 'Anonimo'; 
console.log(username);


// 1Ô∏è‚É£ Se define la funci√≥n fn1(), que imprime "Soy funcion1" y retorna true.
function fn1() {
    console.log('Soy funcion1'); // Imprime "Soy funcion1"
    return true; // Retorna true
}

// 2Ô∏è‚É£ Se define la funci√≥n fn2(), que imprime "Soy funcion2" y retorna true.
function fn2() {
    console.log('Soy funcion2'); // Imprime "Soy funcion2"
    return true; // Retorna true
}

// 3Ô∏è‚É£ Se eval√∫a la expresi√≥n fn1() && fn2() y el resultado se almacena en la variable x.
let x = fn1() && fn2(); 

// üîπ Ejecutando fn1() && fn2():
// - El operador && (AND l√≥gico) eval√∫a el primer operando (fn1()).
   // ‚úî Se ejecuta fn1(), que imprime "Soy funcion1" y devuelve true.
// - Como el primer valor (fn1()) es true, && eval√∫a el segundo operando (fn2()).
   // ‚úî Se ejecuta fn2(), que imprime "Soy funcion2" y devuelve true.
// - Como ambos valores son true, el resultado final de la expresi√≥n es true.
console.log(x); // Imprime true
