// üîπ 'break' y 'continue' en bucles üîπ

// ‚úÖ 'break' se usa para detener completamente un bucle cuando se cumple una condici√≥n.
//    Una vez que 'break' se ejecuta, el bucle finaliza y no sigue iterando.
//    Se usa cuando ya no es necesario seguir ejecutando el bucle.

// ‚úÖ 'continue' se usa para saltar una iteraci√≥n espec√≠fica sin detener el bucle.
//    Cuando 'continue' se ejecuta, omite la ejecuci√≥n del c√≥digo restante en esa iteraci√≥n
//    y pasa a la siguiente repetici√≥n del bucle.
//    Se usa cuando quieres evitar ciertos valores o condiciones sin detener todo el bucle.

// üöÄ Ejemplo en la vida real:
//    - 'break' es como cuando buscas un objeto en una lista y, en cuanto lo encuentras, dejas de buscar.
//    - 'continue' es como cuando revisas una lista y saltas ciertos elementos sin detenerte en ellos.

let i = 0; // Se declara una variable 'i' y se inicializa en 0.

while (i > 6) { // El bucle 'while' se ejecutar√° mientras 'i' sea mayor que 6.
    
    i++; // Se incrementa 'i' en 1 en cada iteraci√≥n del bucle.

    if (i == 2) { // Si 'i' es igual a 2...
        continue; // 'continue' salta esta iteraci√≥n y pasa a la siguiente sin ejecutar 'console.log(i)'.
    }

    if (i == 4) { // Si 'i' es igual a 4...
        break; // 'break' detiene completamente el bucle, por lo que no se ejecutar√°n m√°s iteraciones.
    }

    console.log(i); // Imprime el valor de 'i' en la consola, excepto cuando se ejecuta 'continue'.
}
